blueprint:
  name: "IKEA STYRBAR para NYMÅNE (Acciones Personalizadas)"
  description: >
    Control personalizado para bombilla IKEA NYMÅNE (LED2201G8) usando el mando IKEA STYRBAR (E2001/E2002)
    con acciones específicas para encender/apagar, ajustar brillo gradualmente y
    cambiar la temperatura de color.
  domain: automation
  input:
    styrbar_mqtt_topic:
      name: "Tema MQTT del STYRBAR"
      description: "Ingresa el tema MQTT completo para tu dispositivo STYRBAR (ej: zigbee2mqtt/styrbar_salon)"
      selector:
        text:
    light:
      name: "Bombilla IKEA NYMÅNE"
      description: "Selecciona la bombilla NYMÅNE LED2201G8"
      selector:
        target:
          entity:
            domain: light
    transition_time:
      name: "Tiempo de transición"
      description: "Tiempo en segundos para las transiciones de brillo/color"
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: segundos
    brightness_step:
      name: "Incremento de brillo"
      description: "Porcentaje a incrementar/decrementar el brillo en cada pulsación"
      default: 5
      selector:
        number:
          min: 1
          max: 20
          step: 1
          unit_of_measurement: "%"
    color_temp_step:
      name: "Incremento de temperatura de color"
      description: "Valor mired a incrementar/decrementar en cada pulsación"
      default: 25
      selector:
        number:
          min: 5
          max: 50
          step: 5
          unit_of_measurement: "mired"

variables:
  mqtt_topic: !input styrbar_mqtt_topic
  light: !input light
  transition_time: !input transition_time
  brightness_step: !input brightness_step
  color_temp_step: !input color_temp_step

trigger:
  - platform: mqtt
    topic: "{{ mqtt_topic }}"

action:
  - variables:
      # Decodificar el payload JSON del mensaje MQTT
      payload: "{{ trigger.payload | from_json }}"
      action: "{{ payload.action if payload.action is defined else '' }}"
      is_on: "{{ is_state(states[light].entity_id, 'on') }}"
      
  # Verificar que el mensaje contiene una acción
  - condition: template
    value_template: "{{ action != '' }}"
      
  # Manejo de acciones específicas
  - choose:
      # Encender luz
      - conditions:
          - condition: template
            value_template: "{{ action == 'on' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              transition: "{{ transition_time }}"
      
      # Apagar luz
      - conditions:
          - condition: template
            value_template: "{{ action == 'off' }}"
        sequence:
          - service: light.turn_off
            target: !input light
            data:
              transition: "{{ transition_time }}"
      
      # Subir brillo gradualmente
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_move_up' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_step_pct: "{{ brightness_step }}"
              transition: "{{ transition_time }}"
      
      # Bajar brillo gradualmente
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_move_down' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_step_pct: "-{{ brightness_step }}"
              transition: "{{ transition_time }}"
      
      # Detener cambio de brillo
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_stop' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data: {}
      
      # Bajar temperatura de color (más cálida)
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_left_click' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_on }}"
                sequence:
                  - service: light.turn_on
                    target: !input light
                    data:
                      color_temp_step: "{{ color_temp_step }}"  # Aumenta el valor mired = luz más cálida
                      transition: "{{ transition_time }}"
            default:
              - service: light.turn_on
                target: !input light
                data:
                  brightness_pct: 50
                  color_temp: 350  # Valor mired medio-cálido por defecto
                  transition: "{{ transition_time }}"
      
      # Subir temperatura de color (más fría)
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_right_click' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_on }}"
                sequence:
                  - service: light.turn_on
                    target: !input light
                    data:
                      color_temp_step: "-{{ color_temp_step }}"  # Disminuye el valor mired = luz más fría
                      transition: "{{ transition_time }}"
            default:
              - service: light.turn_on
                target: !input light
                data:
                  brightness_pct: 50
                  color_temp: 250  # Valor mired medio-frío por defecto
                  transition: "{{ transition_time }}"
