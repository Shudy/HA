blueprint:
  name: "IKEA STYRBAR para NYMÅNE (MQTT Direct)"
  description: >
    Control optimizado para bombilla IKEA NYMÅNE (LED2201G8) usando el mando IKEA STYRBAR (E2001/E2002)
    utilizando directamente mensajes MQTT. Esta versión funciona incluso cuando el STYRBAR 
    no expone entidades de acción en Home Assistant.
  domain: automation
  input:
    styrbar_mqtt_topic:
      name: "Tema MQTT del STYRBAR"
      description: "Ingresa el tema MQTT completo para tu dispositivo STYRBAR (ej: zigbee2mqtt/styrbar_salon)"
      selector:
        text:
    light:
      name: "Bombilla IKEA NYMÅNE"
      description: "Selecciona la bombilla NYMÅNE LED2201G8"
      selector:
        target:
          entity:
            domain: light
    transition_time:
      name: "Tiempo de transición"
      description: "Tiempo en segundos para las transiciones de brillo/color"
      default: 1.0
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: segundos
    brightness_step:
      name: "Incremento de brillo"
      description: "Porcentaje a incrementar/decrementar el brillo en cada pulsación"
      default: 20
      selector:
        number:
          min: 5
          max: 50
          step: 5
          unit_of_measurement: "%"

variables:
  mqtt_topic: !input styrbar_mqtt_topic
  light: !input light
  transition_time: !input transition_time
  brightness_step: !input brightness_step
  # Valores específicos para NYMÅNE LED2201G8
  min_brightness: 5
  max_brightness: 100
  warm_color_temp: 2200  # Valor más cálido disponible para NYMÅNE
  cold_color_temp: 4000  # Valor más frío disponible para NYMÅNE
  mid_color_temp: 3000   # Valor intermedio para NYMÅNE

trigger:
  - platform: mqtt
    topic: "{{ mqtt_topic }}"

action:
  - variables:
      # Decodificar el payload JSON del mensaje MQTT
      payload: "{{ trigger.payload | fromjson }}"
      action: "{{ payload.action if payload.action is defined else '' }}"
      is_on: "{{ is_state(states[light].entity_id, 'on') }}"
      
  # Verificar que el mensaje contiene una acción
  - condition: template
    value_template: "{{ action != '' }}"
      
  # Manejo de acciones
  - choose:
      # Encender/Apagar (botón central)
      - conditions:
          - condition: template
            value_template: "{{ action == 'toggle' }}"
        sequence:
          - service: light.toggle
            target: !input light
            data:
              transition: "{{ transition_time }}"
      
      # Control de brillo - Botón arriba simple
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_up_click' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_on }}"
                sequence:
                  - service: light.turn_on
                    target: !input light
                    data:
                      brightness_step_pct: "{{ brightness_step }}"
                      transition: "{{ transition_time }}"
            default:
              - service: light.turn_on
                target: !input light
                data:
                  brightness_pct: 50
                  transition: "{{ transition_time }}"
      
      # Control de brillo - Botón abajo simple
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_down_click' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_on }}"
                sequence:
                  - service: light.turn_on
                    target: !input light
                    data:
                      brightness_step_pct: "-{{ brightness_step }}"
                      transition: "{{ transition_time }}"
            default:
              - service: light.turn_on
                target: !input light
                data:
                  brightness_pct: "{{ min_brightness }}"
                  transition: "{{ transition_time }}"
      
      # Brillo máximo - Mantener botón arriba
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_up_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_pct: "{{ max_brightness }}"
              transition: "{{ transition_time }}"
      
      # Brillo mínimo - Mantener botón abajo
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_down_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_pct: "{{ min_brightness }}"
              transition: "{{ transition_time }}"
      
      # Temperatura de color cálida - Botón izquierdo simple
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_left_click' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_on }}"
                sequence:
                  - service: light.turn_on
                    target: !input light
                    data:
                      kelvin: "{{ warm_color_temp }}"
                      transition: "{{ transition_time }}"
            default:
              - service: light.turn_on
                target: !input light
                data:
                  kelvin: "{{ warm_color_temp }}"
                  brightness_pct: 50
                  transition: "{{ transition_time }}"
      
      # Temperatura de color fría - Botón derecho simple
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_right_click' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_on }}"
                sequence:
                  - service: light.turn_on
                    target: !input light
                    data:
                      kelvin: "{{ cold_color_temp }}"
                      transition: "{{ transition_time }}"
            default:
              - service: light.turn_on
                target: !input light
                data:
                  kelvin: "{{ cold_color_temp }}"
                  brightness_pct: 50
                  transition: "{{ transition_time }}"
      
      # Mantener botón izquierdo - Escena nocturna (temperatura muy cálida y luz tenue)
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_left_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              kelvin: "{{ warm_color_temp }}"
              brightness_pct: 10
              transition: "{{ transition_time }}"
      
      # Mantener botón derecho - Luz de trabajo (temperatura fría y brillo alto)
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_right_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              kelvin: "{{ cold_color_temp }}"
              brightness_pct: 100
              transition: "{{ transition_time }}"
      
      # Doble clic en botón arriba - Brillo al 100% con temperatura intermedia
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_up_2_click' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_pct: 100
              kelvin: "{{ mid_color_temp }}"
              transition: 0.5
      
      # Doble clic en botón abajo - Modo nocturno suave
      - conditions:
          - condition: template
            value_template: "{{ action == 'brightness_down_2_click' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              brightness_pct: 15
              kelvin: "{{ warm_color_temp }}"
              transition: 1.5
      
      # Botón central (mantener) - Luz neutra balanceada
      - conditions:
          - condition: template
            value_template: "{{ action == 'toggle_hold' }}"
        sequence:
          - service: light.turn_on
            target: !input light
            data:
              kelvin: "{{ mid_color_temp }}"
              brightness_pct: 75
              transition: "{{ transition_time }}"
